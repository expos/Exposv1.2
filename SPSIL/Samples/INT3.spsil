define FAT_START 1024;
define DISK_FREE_LIST_START 1536;
define PAGE_TABLE_START 512;
define PCB_START 768;
define READY_LIST 720;
define MEM_FREE_LIST_START 560;
define GFT_START 624;

alias syscallNo S0;
syscallNo=[SP-2];

if(syscallNo == 7) then                     // Fork system call.
	// Searching the readyList for the next free entry.
	alias nextFreePID S1;
	nextFreePID = PID + 1;
	S7=[ READY_LIST + nextFreePID ];
	while( S7 != 0 && nextFreePID != PID ) do
		nextFreePID = ( nextFreePID + 1 )%12;  // 12 denotes the total number of processes.
	endwhile;

	if(nextFreePID == PID) then		//when no free entry is found(List is full)
		[BP+1]=-1;				//-1 denotes failure
		ireturn;
	endif;

	// All the registers of the parent process are replicated in the child's PCB.
	[PCB_START + nextFreePID*16] = nextFreePID;
	alias PCB_COUNT S7;
	PCB_COUNT = 1;
	while( S2 < 12 ) do			//replicating the register values
		  [PCB_START + (nextFreePID*16) + S2] = [PCB_START + (PID*16) + S3];
		  PCB_COUNT = PCB_COUNT + 1;
	endwhile;
	
	//replicating the GFT entries
	alias currLFT S2;
	currLFT = PCB_START + PID*16 + 12;
	alias currGFT S3;
	alias nextFreeGFT S4;
	alias nextLFT S5;
	nextFreeGFT=0;
	nextLFT = PCB_START + nextFreePID*16 + 12;
	S6=0;
	while(S6<4) do
		if([currLFT + S6] == -1) then
			[nextLFT+S6] = -1;
			S6=S6+1;
			continue;
		endif;
		currGFT = [currLFT + S6];
		while( [ GFT_START + nextFreeGFT ] != 1 ) do
			nextFreeGFT = nextFreeGFT + 2;
		endwhile;
		[GFT_START + nextFreeGFT] = [GFT_START + currGFT];
		[GFT_START + nextFreeGFT +1] = [GFT_START + currGFT+ 1];
		[nextLFT+S6] = nextFreeGFT;
		S2 = S2 + 1;
	endwhile;
	
	//replicating the code, data and stack pages
	alias nextFreePage S2;
	nextFreePage = 0;
	alias currPage S3;
	S4=0;
	while( S4 < 4 ) do		// Code, Data & Stack Page for the parent process is replicated in the child process.
		while( [ MEM_FREE_LIST_START + nextFreePage ] == 1 ) do
			nextFreePage = nextFreePage + 1;
		endwhile;
		[PAGE_TABLE_START + nextFreePID*4 + S4] = nextFreePage;
		currPage = [PAGE_TABLE_START + PID*4 + S4];
		
		S5 = 0;
		while(S5 <= 255) do
			[nextFreePage*256 + S5] = [currPage*256 + S5];
			S5 = S5 + 1;
		endwhile;
		S4 = S4 + 1;  
	endwhile;

	[ BP + 1 ] = nextFreePID;
	ireturn;
	
else
	alias fileNameAddr S1;
	fileNameAddr=[SP-2];	//logical address of the filename string in the page table
	alias pageTableEntry S2;	//page table entry for data section
	pageTableEntry=[PAGE_TABLE_START+PID*4+2];
	fileNameAddr=pageTableEntry+fileNameAddr%256;

	//For finding the basic block number of the file
	alias fatFileNameAddr S3;
	fatFileNameAddr=FAT_START;
	while( strcmp(fileNameAddr,fatFileNameAddr)==0 ) do
		fatFileNameAddr=fatFileNameAddr+16;
	endwhile;
	if(fatFileNameAddr==DISK_FREE_LIST_START)then
		[BP+1]=1;
		ireturn;
	endif;

	//loading the code and data blocks from the disk to the memory
	alias basicBlockNo S1;
	basicBlockNo=[fatFileNameAddr+2];

	pageTableEntry=PAGE_TABLE_START+PID*4;
	load([pageTableEntry],[basicBlockNo*256]);
	load([pageTableEntry+1],[basicBlockNo*256+1]);
	load([pageTableEntry+2],[basicBlockNo*256+2]);

	[pageTableEntry+3]=0;	//setting the return address
	BP = 768;
	SP = 769;

	ireturn;
endif;
