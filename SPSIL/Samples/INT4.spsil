define PGTBL_START 512;
define MEM_FREE_LIST_START 560;
define PCB_START 768;
define GFT_START 624;
define READY_LIST_START 720;

//freeing the address space of the current process by setting the corresponding memory free list entries to zero
alias pgTblIndex S0;
pgTblIndex = PGTBL_START+PID*4;
S1=0;
while(S1<4) do
	S5=[pgTblIndex+S1];
	[MEM_FREE_LIST_START+S5]=0;
	S1=S1+1;
endwhile;

//removing the gft entries
alias lftIndex S0;
lftIndex = PCB_START+PID*16+12;
alias gftIndex S1;
S2=0;
while(S2<4) do
	S5=[lftIndex+S2];
	if( S5== -1) then
		S2=S2+1;
		continue;
	endif;
	S5=[ lftIndex + S2 ];
	gftIndex = GFT_START+S5;
	[gftIndex] = -1;
	[gftIndex+1] = -1;
    S2 = S2 + 1;
endwhile;

//setting the ready list entry value of the current process to 0
[READY_LIST_START+PID]=0;

//loading the next available process
alias nextPID S1;
nextPID = PID + 1;
while( ( nextPID != PID ) ) do
	if( nextPID == 0 ) then    // to skip the INIT process with pid = 0.
		nextPID = ( nextPID + 1 )%12;
		continue;
	endif;
	S5=[ READY_LIST_START + nextPID ];
	if( S5 == 1 ) then
		break;
	endif;
	nextPID = ( nextPID + 1 )%12;  // 12 denotes the total number of processes.
endwhile;

PID = nextPID;

//restoring the state of the new process found
S0 = PCB_START + nextPID*16;
BP = [S0+1];
SP = [S0+2];
[SP] = [S0+3];
SP = SP+1;
R0 = [S0+4];
R1 = [S0+5];
R2 = [S0+6]; 
R3 = [S0+7];
R4 = [S0+8];
R5 = [S0+9];
R6 = [S0+10];
R7 = [S0+11];
ireturn;
