// Loading the interrupts.

alias blockNo S0;
alias pageNo S1;

blockNo = 1;
pageNo = 56;


while( blockNo <= 8) do
  load (pageNo,blockNo);
  pageNo = pageNo + 1;
  blockNo = blockNo + 1;
endwhile;

//Loading the FAT

load (4,11);
load (5,12);

// Loading the disk free list

load (6,9);
load (7,10);

// Initialsing the memory free list.

alias memFreeList S0;
memFreeList = 560;

while( memFreeList <= 623 ) do
  if( ( memFreeList >= 568 ) && ( memFreeList <= 615 ) ) then
      [ memFreeList ] = 0;
      memFreeList = memFreeList + 1;
  else
      [ memFreeList ] = 0;
      memFreeList = memFreeList + 1;
   endif;  
endwhile;

// Initialising The Ready List
alias readyList S3;
readyList = 720;

while( readyList <= 731 ) do
	[ readyList ] = 0;
	readyList = readyList + 1;
endwhile;

// Loading the init process.

alias addrSpace S1;
alias codeBlock S2;

addrSpace = 8;
codeBlock = 14;
memFreeList = 568;

while( addrSpace <= 10 ) do
   load (addrSpace, codeBlock);
   [ memFreeList ] = 1;
   codeBlock = codeBlock + 1;
   addrSpace = addrSpace + 1;
   memFreeList = memFreeList + 1;
endwhile;  
[ memFreeList ] = 1;   // reserved for user stack.

readyList = 720;
[ readyList ] = 1;  // for the readyList value for init.

PID = readyList % 720;
SP = 11*256;
BP = SP;
IP = 8*256;         // setting the parameters for init.

alias pageTable S4;
pageTable = 512;
codeBlock = 14;
while( pageTable <=514 ) do
	 pageTable = codeBlock;
	 pageTable = pageTable + 1;
	 codeBlock = codeBlock + 1;
endwhile;
ireturn;
